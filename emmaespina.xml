<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2017-07-27 07:57"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>emmaespina</title>
<link>https://emmaespina.wordpress.com</link>
<description>Just another WordPress.com site</description>
<pubDate>Thu, 27 Jul 2017 07:57:43 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://emmaespina.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>emmaespina</wp:author_login>
  <wp:author_email>espinaemmanuel@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[emmaespina]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>5271367</wp:term_id>
  <wp:category_nicename>mahout</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[mahout]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>631724</wp:term_id>
  <wp:category_nicename>solr</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Solr]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>49525316</wp:term_id>
  <wp:tag_slug>controller-architecture</wp:tag_slug>
  <wp:tag_name><![CDATA[controller architecture]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>50453671</wp:term_id>
  <wp:tag_slug>information-retieval</wp:tag_slug>
  <wp:tag_name><![CDATA[Information retieval]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>40978</wp:term_id>
  <wp:tag_slug>machine-learning</wp:tag_slug>
  <wp:tag_name><![CDATA[machine learning]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>17288589</wp:term_id>
  <wp:tag_slug>naive-bayes</wp:tag_slug>
  <wp:tag_name><![CDATA[naive bayes]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>581</wp:term_id>
  <wp:tag_slug>software</wp:tag_slug>
  <wp:tag_name><![CDATA[software]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2301</wp:term_id>
  <wp:tag_slug>software-development</wp:tag_slug>
  <wp:tag_name><![CDATA[software-development]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3979982</wp:term_id>
  <wp:tag_slug>spellcheckers</wp:tag_slug>
  <wp:tag_name><![CDATA[spellcheckers]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6</wp:term_id>
  <wp:tag_slug>technology</wp:tag_slug>
  <wp:tag_name><![CDATA[technology]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>412979</wp:term_id>
  <wp:tag_slug>web-frameworks</wp:tag_slug>
  <wp:tag_name><![CDATA[web frameworks]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title>emmaespina</title>
		<link>https://emmaespina.wordpress.com</link>
	</image>
	<item>
  <title>Hello world!</title>
  <link>https://emmaespina.wordpress.com/2010/12/27/hello-world/</link>
  <pubDate>Mon, 27 Dec 2010 22:29:37 +0000</pubDate>
  <dc:creator>emmaespina</dc:creator>
  <guid isPermaLink="false">http://emmaespina.wordpress.com/?p=1</guid>
  <description/>
  <content:encoded><![CDATA[<!-- 		@page { margin: 2cm } 		P { margin-bottom: 0.21cm } -->Welcome to my first blog! I've had the idea of writing a blog for a very long time, and for some reason i never started working on it. Probably because i thought that nobody would be interested in what i had to write. Or more possibly because i'm lazy.

Anyway, in my new job (which maybe will be the subject of another post) they give a lot of importance to the research and development. And they encourage us to keep a blog and write about all things that we came up with. But this is just the excuse that somebody lazy like me needs to start a new project: my so anticipated blog in this case.

This blog will be mainly of geek stuff. Written by a geek and aimed to geeks. The software that we use is Solr. This is a big search application that is based on Lucene, which is an inverted index. Oddly, Solr doesn't have a lot of bibliography as other Apache projects has. I found only one book by Packt Publishing, and nothing else. Of course there is a lot of documentation on the website, but that's not the same. So, part of this blog will be about the researching part of my work, creating benchmarks and posting the results and all that. And also about topics that have nothing to do with solr but I always wanted to talk about, just because I found them interesting.

Finally I tell you that English is not my native language, but as we all know, Esperanto didn't have the success that it creator expected and English was adopted as the universal language (natural selection perhaps). So i'll be writing all my posts in English, and that's why you'll find some strange grammar and vocabulary in my blog!!!

I hope you all like this blog-project!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2010-12-27 22:29:37</wp:post_date>
  <wp:post_date_gmt>2010-12-27 22:29:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hello-world</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19271513]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>About</title>
  <link>https://emmaespina.wordpress.com/about/</link>
  <pubDate>Mon, 27 Dec 2010 22:29:37 +0000</pubDate>
  <dc:creator>emmaespina</dc:creator>
  <guid isPermaLink="false">http://emmaespina.wordpress.com/?page_id=2</guid>
  <description/>
  <content:encoded><![CDATA[I live in Buenos Aires, Argentina. I'm studying to become a computer engineer at Universidad de Buenos Aires since 2003, and i'm about to graduate next year (i hope!). Currently I'm working at <a href="http://www.despegar.com/">despegar.com</a>, the main travel agency in latin america, in the search engine marketing team. I am part of the Solr team. In the past I've worked as a Solr Consultant for <a href="http://www.lucidworks.com/">Lucidworks</a>. Before thatÂ I worked 5 years in the Argentinan Government.I have always loved computers, maths, physics and all that kind of nerdy stuff, and now i will write about that!!!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2010-12-27 22:29:37</wp:post_date>
  <wp:post_date_gmt>2010-12-27 22:29:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19271513]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>12</wp:comment_id>
    <wp:comment_author><![CDATA[Katie McKinsey]]></wp:comment_author>
    <wp:comment_author_email>katie@dzone.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.dzone.com</wp:comment_author_url>
    <wp:comment_author_IP>70.63.133.62</wp:comment_author_IP>
    <wp:comment_date>2011-04-14 20:44:48</wp:comment_date>
    <wp:comment_date_gmt>2011-04-14 20:44:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Emma, 

I ran across your blog while I was locating Solr content for our website.  I'm a content curator for DZone.com, a site caters to developers.  

Assuming you intend to continue to add content to this blog, we'd like to invite you to join our Most Valuable Blogger program. Here's a link to a page with more information about the program: http://www.dzone.com/aboutmvb

Signing up is easy.  We just ask that you fill out a release form, complete a DZone user profile, and send us a picture to post along with your articles.  

If this sounds like something that would interest you, send me an email at my direct email address: katie@dzone.com.

I'll be looking forward to hearing from you!

-Katie McKinsey-]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1302813889.0341";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1412561943.6409890651702880859375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-04-14 20:44:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>35</wp:comment_id>
    <wp:comment_author><![CDATA[Ilias Tsagklis]]></wp:comment_author>
    <wp:comment_author_email>ilias.tsagklis@javacodegeeks.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.javacodegeeks.com</wp:comment_author_url>
    <wp:comment_author_IP>85.74.131.165</wp:comment_author_IP>
    <wp:comment_date>2012-03-07 18:33:48</wp:comment_date>
    <wp:comment_date_gmt>2012-03-07 18:33:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi there,

Nice blog! Is there an email address I can contact you in private?]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1331145228.6474";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1412561943.8029029369354248046875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-03-07 18:33:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>317</wp:comment_id>
    <wp:comment_author><![CDATA[Bruno Volpini]]></wp:comment_author>
    <wp:comment_author_email>bruno@educaedu.com</wp:comment_author_email>
    <wp:comment_author_url>https://www.educaedu,com</wp:comment_author_url>
    <wp:comment_author_IP>200.89.177.130</wp:comment_author_IP>
    <wp:comment_date>2014-12-02 16:20:43</wp:comment_date>
    <wp:comment_date_gmt>2014-12-02 16:20:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Emmanuel buenos dÃ­as. Mi nombre es Bruno y trabajo como especialista linux en educaedu.com. Buscando en linkedin encontrÃ© tu perfil y me pareciÃ³ interesante ya que tenemos un inconveniente con Solr actualmente.
Basicamente tenemos 3 instancias de amazon con zookeeper y 3 entidadesconfiguradas. Lo que necesitamos es verificar como tener un backup de esas instancias y verificar que este bien instalado ya que la persona que lo instalÃ³ se fue y no dejÃ³ documentaciÃ³n alguna.
Mi consulta es si actualmente brindÃ¡s consultorÃ­a externa sobre solr y sino lo haces, por ahÃ­ podrÃ­as indicarme alguna empresa o persona que realice este servicio.
Mil disculpas si te generÃ© una molestia y desde ya muchas gracias
Bruno.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1417537243.4980471134185791015625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1417537243</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1417541858.6504800319671630859375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Solr Spellchecker internals (now with tests!)</title>
  <link>https://emmaespina.wordpress.com/2011/01/18/solr-spellchecker-internals-now-with-tests/</link>
  <pubDate>Tue, 18 Jan 2011 13:59:40 +0000</pubDate>
  <dc:creator>emmaespina</dc:creator>
  <guid isPermaLink="false">http://emmaespina.wordpress.com/?p=8</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Letâs talk about spellcheckers. A spellchecker, as you may know, is that device that tells you whether you misspelled or not a word, and makes you some suggestions. One of the first spellcheckers that i remember seeing is the MS Word spellchecker. One could say that MS Word defined the âstandard interfaceâ of word processors spellcheckers: you misspelled a word, it was underlined with a zig zag style line in red, and if you right clicked on it, a list of suggested words appeared. I have seen this interface in many different software, for example, google docs.</p>
<p style="text-align:justify;">Another more modern example is the famous âDid you meanâ from Google. You type some words like âbritny spearsâ and google would suggest âBritney Spearsâ. It appears that a lot of people have issues spelling <a href="http://www.google.com/jobs/britney.html">Britney Spears</a>. But Google is different. As usual, they use artificial intelligence algorithms to suggest misspelled words. Google algorithms are the closest you'll get to magic in computer engineering.
But today Iâm going to talk about Solr SpellChecker. In contrast with from google, Solr spellcheker isn't much more than a pattern similarity algorithm. You give it a word and it will find similar words. But what is interpreted as âsimilarâ by Solr? The words are interpreted just as an array of characters, so, two words are similar if they have many coincidences in their character sequences. That may sound obvious, but in natural languages the bytes (letters) have little meaning. It is the entire word that has a meaning. So, Solr algorithms won't even know that you are giving them words. Those byte sequences could be sequences of numbers, or sequences of colors. Solr will find the sequences of numbers that have small differences with the input, or the sequences of colors, etc. By the way, this is not the approach that Google follows. Google knows the frequent words, the frequent misspelled words, and the frequent way humans make mistakes. It is my intention to talk about these interesting topics in a next post, but now let's study how solr spellchecker works in detail, and then make some tests.</p>
<p style="text-align:justify;">Solr spellchecker follows the same strategy as many other spellcheckers. It has a dictionary of correct spelled terms (correct by definition, if there is a misspelled word in the dictionary that will pass as a correct word). When somebody asks for suggestions to a word, Solr Spellchecker first obtains a list of candidate words and then ranks those candidates according to some criteria. The first step is accomplished by ngrams. A ngram is a substring in a string. For example if you have the word 'house', some ngrams would be 'hou', 'ous', 'se' (there are many other ngrams of differents lenghts, iâve shown you only three of them). Two similar words will have many matching ngrams: 'mouse' also has 'ous' and 'se' but not 'hou'. What Solr does is create a Lucene index of the words in the dictionary and filter them with ngram filters. So when you ask for suggestions for âhouseâ, Solr searches 'ho' OR 'ou' OR 'us' OR 'se' OR 'hou' OR 'ous' OR 'use' OR 'hous' OR 'ouse' and, because Solr ranks boolean querys by the document with more coincidences, what you'll get is a list of some similar words from our dictionary.</p>
<p style="text-align:justify;">How does Solr rank the words afterwards? There is something called edit distance that tells us how many operations we have to perform in order to transform a word into another. By operations we understand insertions, deletions, or modifications of single characters. There are many algorithms to find the edit distance, one is Levenshtein (that is the default algorithm used in Solr). These algorithms are computationally complex, and that's the reason why Solr doesnât use them as the first choice in selecting the suggestions from among all the words in the dictionary. The dictionary is reduced and then this âdifficultâ ranking process is performed.
Perhaps, now you understand what I meant by âsolr spellchecker only find similar byte arraysâ. You never introduce information about our natural language into the algorithm and the only thing you provide is âa set of byte secuencesâ (ie a dictionary)</p>
<p style="text-align:justify;">So far, so well. Does this approach work? Yes. Could it work better? Of course! And we have a lot of things that we can do to improve the algorithm. But first, letâs try to make this look scientific (if you remember, that was the idea of internet in the first place...) We need tests to see where we are standing. Something that I find boring is moving from the theoretical side to the experimental side. But that is a must in this that we call research. So, next I present a series of different tests that I performed on a Solr instance (that we have for experimental purposes) of the wikipedia (I recommend reading this <a href="http://juanggrande.wordpress.com/2010/12/20/solr-index-size-analysis/">post</a> about how we indexed wikipedia, for all of you trying to index huge amounts of text)
I created a dictionary using the words from wikipedia and then tested a lot of different misspelled words taken from different origins.</p>

<div>
<p style="text-align:justify;">For each test case, i created a small Python script that simply queries every single misspelled word against Solr, and counts in which place the correct spelled word returns. The test case includes the correct expected word. You can download the source from <a href="http://dl.dropbox.com/u/18984879/spell.zip">here</a>.</p>
<p style="text-align:justify;">The first set is a synthetic misspelled word list, that I created from a dictionary taken from Internet (it is a dictionary from Ispell) and applying modifications of âedit distance 1â to the words. I used part of the algorithm by Peter Norvig, from his excelent <a href="http://norvig.com/spell-correct.html">article</a> on spellcheckers</p>
<p style="text-align:justify;">Total Word processed: 19708
Found in the first 1 positions: 53%
Found in the first 2 positions: 58%
Found in the first 3 positions: 60%
Found in the first 10 positions: 61%</p>
<p style="text-align:justify;">That means that 53% of the words were properly corrected in the first suggestion, 58% in the first two, and so on. Pretty awful results even with an easy dataset. But let's try something more difficult.</p>
<p style="text-align:justify;">Aspell is the GNU spellchecker library from GNU. They provide a <a href="http://aspell.net/test/cur/">dataset</a> that they use to test their library. They have very good results, but they use a different method.
I tried that library against our test environment and this is the result</p>
<p style="text-align:justify;">Total Word processed: 547
Found in the first 1 positions: 27%
Found in the first 2 positions: 33%
Found in the first 3 positions: 37%
Found in the first 10 positions: 45%</p>
<p style="text-align:justify;">Even worse. They do not specify the origin of these words. A good test would be using real mistakes from real humans. These were taken from a freely available <a href="http://ota.oucs.ox.ac.uk/headers/0643.xml">file</a>. I tested a list of common misspelled words from collage students, a list of typos, and a list of known spelling errors in the English language (all that can be seen in the Readme file that comes with the download, i donât want to extend in this). The format of some of these files needed to be converted. In the previous code download I included the scripts for this.</p>
<p style="text-align:justify;"><strong>MASTERS</strong> <em>Misspellings of about 260 words made in Â spelling Â tests Â by Â 600 students Â in Â Iowa Â in Â the Â 1920's - 200 8th graders, 200 high-school seniors and 200 college seniors</em></p>
<p style="text-align:justify;">Total Word processed: 13020
Found in the first 1 positions: 27 %
Found in the first 2 positions: 35 %
Found in the first 3 positions: 38 %
Found in the first 10 positions: 44 %</p>
<p style="text-align:justify;"><strong>SHEFFIELD</strong> <em>A list of about 380 misspellings, Â mostly Â keying Â errors, Â taken from Â typewritten or computer-terminal input, collected from staff and students Â in Â the Â Department Â of Â Information Â Studies Â of Â Sheffield University Â by Â Angell, Â Freund Â and Â Willett Â as Â part Â of a piece of</em>
<em> research into spelling correction.</em></p>
<p style="text-align:justify;">Total Word processed: 384
Found in the first 1 positions: 57 %
Found in the first 2 positions: 62 %
Found in the first 3 positions: 65 %
Found in the first 10 positions: 70 %</p>
<p style="text-align:justify;"><strong>FAWTHROP</strong> <em>A compilation of four Â collections Â of Â American Â spelling Â errors, already in published form.</em></p>
<p style="text-align:justify;">Total Word processed: 809
Found in the first 1 positions: 44 %
Found in the first 2 positions: 50 %
Found in the first 3 positions: 52 %
Found in the first 9 positions: 55 %</p>
<p style="text-align:justify;">The best result and very similar to my first test is the one of typos. That's because typos are generally words with edit distance 1 to real words (you don't usually make two typos in the same word) The others are pretty bad. This scenario is the same that anyone indexing a big document corpus (as wikipedia) and creating an index with it would do, and that is the effectiveness that he'll get in the spellchecker.</p>
<p style="text-align:justify;">What could be the reason of these results? Probably the results are bad because Solr spellchecker doesnâ't know anything about the natural languange that we call English.
How can you improve these results? With a different approach to spellchecking. There are algorithms that find words that sound similar to making suggestions. How a word sounds adds a lot of information about the natural language (and the psychology of making mistakes) to the system! (this is the aproach followed by GNU Aspell). Other algorithms use the information theory that Shannon created and consider that we humans are noisy channels that introduce noise (spelling mistakes) to words. If you introduce natural languages information via statistics, you can get better results (like in the <a href="http://norvig.com/spell-correct.html">article</a> by Peter Norvig)
In future posts we'll implement some of these algorithms and (following the scientific tradition) we'll test them.
I'll see you in the future!!!</p>

</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>8</wp:post_id>
  <wp:post_date>2011-01-18 13:59:40</wp:post_date>
  <wp:post_date_gmt>2011-01-18 13:59:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>solr-spellchecker-internals-now-with-tests</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="information-retieval"><![CDATA[Information retieval]]></category>
  <category domain="category" nicename="solr"><![CDATA[Solr]]></category>
  <category domain="post_tag" nicename="spellcheckers"><![CDATA[spellcheckers]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19271513]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[Creating a spellchecker with Solr &laquo; emmaespina]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://emmaespina.wordpress.com/2011/01/31/20/</wp:comment_author_url>
    <wp:comment_author_IP>74.200.247.229</wp:comment_author_IP>
    <wp:comment_date>2011-01-31 18:40:31</wp:comment_date>
    <wp:comment_date_gmt>2011-01-31 18:40:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] About     &laquo; Solr Spellchecker internals (now with&nbsp;tests!) [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1296500922.6652";s:7:"message";s:55:"Akismet cleared this comment during an automatic retry.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1296499231.685";s:7:"message";s:92:"Akismet was unable to check this comment (response: ), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1296499307</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1296499308.0978";s:7:"message";s:49:"emmaespina changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-01-31 18:40:31</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>13</wp:comment_id>
    <wp:comment_author><![CDATA[Lucid Imagination &raquo; Creating a spellchecker with Solr]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.lucidimagination.com/blog/2011/04/15/creating-a-spellchecker-with-solr/</wp:comment_author_url>
    <wp:comment_author_IP>216.150.31.250</wp:comment_author_IP>
    <wp:comment_date>2011-04-15 22:27:00</wp:comment_date>
    <wp:comment_date_gmt>2011-04-15 22:27:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] a previousÂ post I talked about how the Solr Spellchecker works and then I showed you some test results of its [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1302906778</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:13:"1302906778.57";s:7:"message";s:49:"emmaespina changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1302906420.7664";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-04-15 22:27:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10</wp:comment_id>
    <wp:comment_author><![CDATA[wynz]]></wp:comment_author>
    <wp:comment_author_email>wynzlo@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>180.183.148.41</wp:comment_author_IP>
    <wp:comment_date>2011-03-11 06:36:52</wp:comment_date>
    <wp:comment_date_gmt>2011-03-11 06:36:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great post, thanks for sharing the results of your experiments. I've been trying to wrap my head around Solr's spelling analysis and this really clarified much of the confusion. While I was hoping there was some magic one-size-fits-all algorithm, it's become clear that the tools really need to be tailored to the data set.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1299845829</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1299845829.9635";s:7:"message";s:49:"emmaespina changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1299825413.2448";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-03-11 06:36:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>294</wp:comment_id>
    <wp:comment_author><![CDATA[Creating a spellchecker with Solr &#8211; Lucidworks]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://lucidworks.staging.wpengine.com/blog/creating-a-spellchecker-with-solr/</wp:comment_author_url>
    <wp:comment_author_IP>192.155.83.181</wp:comment_author_IP>
    <wp:comment_date>2014-10-08 20:12:18</wp:comment_date>
    <wp:comment_date_gmt>2014-10-08 20:12:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] a previousÂ post I talked about how the Solr Spellchecker works and then I showed you some test results of its [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1412799138.61942195892333984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2014-10-08 20:12:19</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1412804525.8567559719085693359375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1439357443</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1439357444.51580905914306640625;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>plugtree-link-lite</title>
  <link>https://emmaespina.wordpress.com/plugtree-link-lite/</link>
  <pubDate>Tue, 18 Jan 2011 15:07:39 +0000</pubDate>
  <dc:creator>emmaespina</dc:creator>
  <guid isPermaLink="false">http://emmaespina.files.wordpress.com/2011/01/plugtree-link-lite.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>15</wp:post_id>
  <wp:post_date>2011-01-18 15:07:39</wp:post_date>
  <wp:post_date_gmt>2011-01-18 15:07:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>plugtree-link-lite</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://emmaespina.files.wordpress.com/2011/01/plugtree-link-lite.png</wp:attachment_url>
</item>
<item>
  <title>Creating a spellchecker with Solr</title>
  <link>https://emmaespina.wordpress.com/2011/01/31/20/</link>
  <pubDate>Mon, 31 Jan 2011 14:40:15 +0000</pubDate>
  <dc:creator>emmaespina</dc:creator>
  <guid isPermaLink="false">http://emmaespina.wordpress.com/?p=20</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Introduction</h1>
In a previous <a href="http://emmaespina.wordpress.com/2011/01/18/solr-spellchecker-internals-now-with-tests/">post</a> I talked about how the Solr Spellchecker works and then I showed you some test results of its performance. Now we are going to see another aproach to spellchecking.

This method, as many others, use a two step procedure. A rather fast âcandidate wordâ selection, and then a scoring of those words. We are going to select different methods from the ones that Solr uses and test its performance. Our main objective will be effectiveness in the correction, and in a second term, velocity in the results. We can tolerate a slightly slower performance considering that we are gaining in correctness of the results.

Our strategy will be to use a special Lucene index, and query it using fuzzy queries to get a candidate list. Then we are going to rank the candidates with a Python script (that can easily be transformed in a Solr spell checker subclass if we get better results).
<h1>Candidate selection</h1>
Fuzzy queries have historically been considered a slow performance query in relation with others but , as they have been optimized in the 1.4 version, they are a good choice for the first part of our algorithm. So, the idea will be very simple: we are going to construct a Lucene index where every document will be a dictionary word. When we have to correct a misspelled word we are going to do a simple fuzzy query of that word and get a list of results. The results will be words similar to the one we provided (ie with a small edit distance). I found that with approximately 70 candidates we can get excellent results.

With fuzzy queries we are covering all the typos because, as I said in the previous post, most of the typos are of edit distance 1 with respect to the correct word. But although this is the most common error people make while typing, there are other kinds of errors.

We can find three types of misspellings <a href="#kukich">[Kukich]</a>:
<ol>
	<li>Typographic errors</li>
	<li>Cognitive errors</li>
	<li>Phonetic errors</li>
</ol>
Typographic errors are the typos, when people knows the correct spelling but makes a motor coordination slip when typing. The cognitive errors are those caused by a lack of knowledge of the person. Finally, phonetic errors are a special case of cognitive errors that are words that sound correctly but are orthographically incorrect. We already covered typographic errors with the fuzzy query, but we can also do something for the phonetic errors. Solr has a Phonetic Filter in its analysis package that, among others, has the double methaphone algorithm. In the same way we perform fuzzy query to find similar words, we can index the methaphone equivalent of the word and perform fuzzy query on it. We must manually obtain the methaphone equivalent of the word (because the Lucene query parser don't analyze fuzzy queries) and construct a fuzzy query with that word.

In few words, for the candidate selection we construct an index with the following solr schema:

[sourcecode language="html"]
&lt;fieldType name=&quot;spellcheck_text&quot; class=&quot;solr.TextField&quot; positionIncrementGap=&quot;100&quot; autoGeneratePhraseQueries=&quot;true&quot;&gt;
      &lt;analyzer type=&quot;index&quot;&gt;
        &lt;tokenizer class=&quot;solr.KeywordTokenizerFactory&quot;/&gt;
        &lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&gt;
        &lt;filter class=&quot;solr.PhoneticFilterFactory&quot; encoder=&quot;DoubleMetaphone&quot; maxCodeLength=&quot;20&quot; inject=&quot;false&quot;/&gt;
     &lt;/analyzer&gt;
    &lt;/fieldType&gt;

   &lt;field name=&quot;original_word&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&gt;
   &lt;field name=&quot;analyzed_word&quot; type=&quot;spellcheck_text&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&gt;
   &lt;field name=&quot;freq&quot; type=&quot;tfloat&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&gt;
[/sourcecode]

As you can see the analyzed_word field contains the âsoundslikeâ of the word. The freq field will be used in the next phase of the algorithm. It is simply the frequency of the term in the language. How can we estimate the frequency of a word in a language? Counting the frequency of the word in a big text corpus. In this case the source of the terms is the wikipedia and we are using the TermComponents of Solr to count how many times each term appears in the wikipedia.

But the Wikipedia is written by common people that make errors! How can we trust in this as a âcorrect dictionaryâ? We make use of the âcolective knowledgeâ of the people that writes the Wikipedia. This dictionary of terms extracted from the Wikipedia has a lot of terms! Over 1.800.00, and most of them aren't even words. It is likely that words with a high frequency are correctly spelled in the Wikipedia. This approach of building a dictionary from a big corpus of words and considering correct the most frequent ones isn't new. In <a href="#cucerzan">[Cucerzan]</a> they use the same concept but using query logs to build the dictionary. It apears that Google's âDid you meanâ use a similar <a href="http://www.youtube.com/watch?v=syKY8CrHkck#t=22m03s">concept</a>.

We can add little optimizations here. I have found that we can remove some words and get good results. For example, I removed words with frequency 1, and words that begin with numbers. We can continue removing words based on other criteria, but we'll leave this like that.

So the procedure for building the index is simple, we extract all the terms from the wikipedia index via the TermsComponent of Solr along with frequencies, and then create an index in Solr, using SolrJ.
<h1>Candidate ranking</h1>
Now the ranking of the candidates. For the second phase of the algorithm we are going to make use of information theory, in particular, the <a href="http://en.wikipedia.org/wiki/Noisy_channel_model">noisy channel model</a>. The noisy channel applied to this case assumes that the human knows the correct spelling of a word but some noise in the channel introduces the error and as the result we get another word, misspelled. We intuitively know that it is very unlikely that we get 'sarasa' when trying to type 'house' so the noisy channel model introduces some formality to finding how probable an error was.
For example, we have misspelled 'houze' and we want to know which one is the most likely word that we wanted to type. To accomplish that we have a big dictionary of possible words, but not all of them are equally probable. We want to obtain the word with the highest probability of having been intended to be typed. In mathematics that is called conditional probability; given that we typed 'houze' how high is the probability of each of the correct words to be the word that we intended. The notation of conditional probability is: P('house'|'houze') that stands for the probability of 'house' given 'houze'

This problem can be seen from two perspectives: we may think that the most common words are more probable, for example 'house' is more probable than 'hose' because the former is a more common word. In the other hand, we also intuitively think that 'house' is more probable than 'photosinthesis' because of the big difference in both words. Both of these aspects, are formally deduced by <a href="http://en.wikipedia.org/wiki/Bayes'_theorem">Bayes theorem</a>:
<p style="text-align:center;">$latex P(house|houze) = \frac{P(houze|house) P(house)}{P(houze)}&amp;s=2 $</p>
We have to maximize this probability and to do that we only have one parameter: the correct candidate word ('house' in the case shown).

For that reason the probability of the misspelled word will be constant and we are not interested in it. The formula reduces to
<p style="text-align:center;">$latex Max(P(house|houze)) = Max(P(houze|house) P(house))&amp;s=1 $</p>
<p style="text-align:left;">And to add more structure to this, scientists have given named to these two factors. The P('houze'|'house') factor is the Error model (or Channel Model) and relates with how probable is that the channel introduces this particular misspell when trying to write the second word. The second term P('house') is called the Language model and gives us an idea of how common a word is in a language.</p>
Up to this point, I only introduced the mathematical aspects of the model. Now we have to come up with a concrete model of this two probabilities. For the Language model we can use the frequency of the term in the text corpus. I have found empirically that it works much better to use the logarithm of the frequency rather than the frequency alone. Maybe this is because we want to reduce the weight of the very frequent terms more than the less frequent ones, and the logarithm does just that.

There is not only one way to construct a Channel model. Many different ideas have been proposed. We are going to use a simple one based in the Damerau-Levenshtein distance. But also I found that the fuzzy query of the first phase does a good job in finding the candidates. It gives the correct word in the first place in more than half of the test cases with some datasets. So the Channel model will be a combination of the Damerau-Levenshtein distance and the score that Lucene created for the terms of the fuzzy query.

The ranking formula will be:
<p style="text-align:center;">$latex Score = \frac{Levenshtein}{log(freq) Fuzzy}&amp;s=2 $</p>
I programmed a small script (python) that does all that was previously said:

[sourcecode language="python"]
from urllib import urlopen
import doubleMethaphone
import levenshtain
import json

server = &quot;http://benchmarks:8983/solr/testSpellMeta/&quot;

def spellWord(word, candidateNum = 70):
    #fuzzy + soundlike
    metaphone = doubleMethaphone.dm(word)
    query = &quot;original_word:%s~ OR analyzed_word:%s~&quot; % (word, metaphone[0])

    if metaphone[1] != None:
        query = query + &quot; OR analyzed_word:%s~&quot; % metaphone[1]

    doc = urlopen(server + &quot;select?rows=%d&amp;wt=json&amp;fl=*,score&amp;omitHeader=true&amp;q=%s&quot; % (candidateNum, query)).read( )
    response = json.loads(doc)
    suggestions = response['response']['docs']

    if len(suggestions) &gt; 0:
        #score
        scores = [(sug['original_word'], scoreWord(sug, word)) for sug in suggestions]
        scores.sort(key=lambda candidate: candidate[1])
        return scores
    else:
        return []

def scoreWord(suggestion, misspelled):
    distance = float(levenshtain.dameraulevenshtein(suggestion['original_word'], misspelled))
    if distance == 0:
        distance = 1000
    fuzzy = suggestion['score']
    logFreq = suggestion['freq']

    return distance/(fuzzy*logFreq)
[/sourcecode]

From the previous listing I have to make some remarks. In line 2 and 3 we use third party libraries for <a href="http://mwh.geek.nz/2009/04/26/python-damerau-levenshtein-distance/">Levenshtein distance</a> and <a href="http://www.atomodo.com/code/double-metaphone">metaphone</a> algorithms. In line 8 we are collecting a list of 70 candidates. This particular number was found empirically. With higher candidates the algorithm is slower and with fewer is less effective. We are also excluding the misspelled word from the candidates list in line 30. As we used the wikipedia as our source it is common that the misspelled word is found in the dictionary. So if the Leveshtain distance is 0 (same word) we add 1000 to its distance.
<h1>Tests</h1>
I ran some tests with this algorithm. The first one will be using the dataset that <a href="http://norvig.com/spell-correct.html">Peter Norvig</a> used in his article. I found the correct suggestion of the word in the first position approximately 80% of the times!!! That's is a really good result. Norvig with the same dataset (but with a different algoritm and training set) got 67%

Now let's repeat some of the test of the previous post to see the improvement. In the following table I show you the results.
<table border="1">
<tbody>
<tr>
<td align="LEFT" width="144" height="17"><strong>Test set</strong></td>
<td align="LEFT" width="86"><strong>% Solr</strong></td>
<td align="LEFT" width="86"><strong>% new</strong></td>
<td align="LEFT" width="86"><strong> Solr time [seconds]</strong></td>
<td align="LEFT" width="108"><strong>New time [seconds]</strong></td>
<td align="LEFT" width="86"><strong>Improvement</strong></td>
<td align="LEFT" width="99"><strong>Time loss</strong></td>
</tr>
<tr>
<td align="LEFT" height="17">
<pre><em><span style="color:#00aa00;font-family:monospace;">FAWTHROP1DAT.643</span></em></pre>
</td>
<td align="RIGHT">
<pre><span style="font-family:monospace;">45,61%</span></pre>
</td>
<td align="RIGHT">
<pre><span style="font-family:monospace;">81,91%</span></pre>
</td>
<td align="RIGHT">
<pre><span style="font-family:monospace;">31,50</span></pre>
</td>
<td align="RIGHT">
<pre><span style="font-family:monospace;">74,19</span></pre>
</td>
<td align="RIGHT">
<pre>79,58%</pre>
</td>
<td align="RIGHT">
<pre>135,55%</pre>
</td>
</tr>
<tr>
<td align="LEFT" height="17">
<pre><em><span style="color:#00aa00;font-family:monospace;">batch0.tab</span></em></pre>
</td>
<td align="RIGHT">
<pre><span style="font-family:monospace;">28,70%</span></pre>
</td>
<td align="RIGHT">
<pre><span style="font-family:monospace;">56,34%</span></pre>
</td>
<td align="RIGHT">
<pre><span style="font-family:monospace;">21,95</span></pre>
</td>
<td align="RIGHT">
<pre><span style="font-family:monospace;">47,05</span></pre>
</td>
<td align="RIGHT">
<pre>96,30%</pre>
</td>
<td align="RIGHT">
<pre>114,34%</pre>
</td>
</tr>
<tr>
<td align="LEFT" height="17">
<pre><em><span style="color:#00aa00;font-family:monospace;">SHEFFIELDDAT.643</span></em></pre>
</td>
<td align="RIGHT">
<pre><span style="font-family:monospace;">60,42%</span></pre>
</td>
<td align="RIGHT">
<pre><span style="font-family:monospace;">86,24%</span></pre>
</td>
<td align="RIGHT">
<pre><span style="font-family:monospace;">19,29</span></pre>
</td>
<td align="RIGHT">
<pre><span style="font-family:monospace;">35,12</span></pre>
</td>
<td align="RIGHT">
<pre>42,75%</pre>
</td>
<td align="RIGHT">
<pre>82,06%</pre>
</td>
</tr>
</tbody>
</table>
We can see that we get very good improvements in effectiveness of the correction but it takes about twice the time.
<h1>Future work</h1>
How can we improve this spellchecker. Well, studying the candidates list it can be found that the correct word is generally (95% of the times) contained in it. So all our efforts should be aimed to improve the scoring algorithm.

We have many ways of improving the channel model; several papers show that calculating more sophisticated distances weighting the different letter transformations according to language statistics can give us a better measure. For example we know that writing 'houpe' y less probable than writing 'houze'.

For the language model, great improvements can be obtained by adding more context to the word. For example if we misspelled 'nouse' it is very difficult to tell that the correct word is 'house' or 'mouse'. But if we add more words âpaint my nouseâ it is evident that the word that we were looking for was 'house' (unless you have strange habits involving rodents). These are also called ngrams (but of words in this case, instead of letters). Google has offered a big collection of ngrams that are available to download, with their frequencies.

Lastly but not least, the performance can be improved by programming the script in java. Part of the algorithm was in python.

Bye!

As an update for all of you interested, Robert MuirÂ <a href="http://search-lucene.com/m/n0xN61iTIry/My+spellchecker+experiment&amp;subj=My+spellchecker+experiment">told me</a>Â in the Solr User list that there is a new spellchecker, DirectSpellChecker, that was in the trunk then and now should be part of Solr 3.1. It uses a similar technique to the one i presented in this entry without the performance loses.
<h3>References</h3>
<a name="kukich"></a><em>[Kukich] Karen Kukich - Techniques for automatically correcting words in text - ACM Computing Surveys - Volume 24 Issue 4, Dec. 1992</em>

<em><a name="cucerzan"></a>[Cucerzan] S. Cucerzan and E. Brill Spelling correction as an iterative process that exploits the collective knowledge of web users. July 2004</em>

<em><a href="http://norvig.com/spell-correct.html">Peter Norvig - How to Write a Spelling Corrector</a></em>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>20</wp:post_id>
  <wp:post_date>2011-01-31 14:40:15</wp:post_date>
  <wp:post_date_gmt>2011-01-31 14:40:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>20</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="information-retieval"><![CDATA[Information retieval]]></category>
  <category domain="category" nicename="solr"><![CDATA[Solr]]></category>
  <category domain="post_tag" nicename="spellcheckers"><![CDATA[spellcheckers]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19271513]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_98178eca8391c2245ece4905d883d75d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a7a04ac599d7d4613a73dbd4b51cb02b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_411a45ce74cc789c9bcee08096e9d667</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0e0f0a17d62953a850a9b745a9986cd2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_833bf5e7d1ad96a32d266eb61811db15</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9293df472155c05bb040870c6f093a97</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_89b1ae73ef9468e15ac007cd1f32e41e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>21</wp:comment_id>
    <wp:comment_author><![CDATA[Itman]]></wp:comment_author>
    <wp:comment_author_email>leo@boytsov.info</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>71.163.194.238</wp:comment_author_IP>
    <wp:comment_date>2011-04-30 18:44:41</wp:comment_date>
    <wp:comment_date_gmt>2011-04-30 18:44:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I hope that you will continue this series of posts! A couple of comments though: n-gram is a bit of an over-used term. To avoid confusion, n-grams inside words are often called q-grams.

I would also note that q-grams are not the most efficient spell-checking method, but in my experience is one of the slowest ones. It may be better to employ some form of neighborhood generation. One advantage is that you start finding words within one misspelling, which is enough in most cases. This is also useful to treat context errors, such as taxi -&gt; taksi, or errors that occur mechanically (pressing a close key).

The number of neighborhood elements grow very quickly with the maximum allowed Levenshtein error. However, one can work around this problem through considering "hashed" alphabets, where all letters are divided into few groups.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1304189082.1381";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1304212296</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1304212296.4986";s:7:"message";s:49:"emmaespina changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-04-30 18:44:41</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>17</wp:comment_id>
    <wp:comment_author><![CDATA[Avi Rappoport, SearchTools.com]]></wp:comment_author>
    <wp:comment_author_email>consult9@searchtools.com</wp:comment_author_email>
    <wp:comment_author_url>http://searchtoolscom.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>71.135.47.64</wp:comment_author_IP>
    <wp:comment_date>2011-04-20 20:32:06</wp:comment_date>
    <wp:comment_date_gmt>2011-04-20 20:32:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The technical aspects of this article are very clear and helpful, thanks for all that.  

I find that creating a dictionary from the source data itself, including jargon, product names, identifiers and slang, is better than using a generic dictionary or the Wikipedia corpus.  Your logarithmic frequency measure would handle most of the problems with misspellings.  Now that I think about it, in some cases, text which is misspelled according to a standard dictionary would be correct on a site, "Solr" is the most obvious example.  I think it's worth actively curating that dictionary list.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17137769</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1303331526.7285";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:14:"searchtoolscom";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1303333331</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1303333331.9673";s:7:"message";s:49:"emmaespina changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-04-20 20:32:06</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>26</wp:comment_id>
    <wp:comment_author><![CDATA[N]]></wp:comment_author>
    <wp:comment_author_email>namratatholiya@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>66.43.117.226</wp:comment_author_IP>
    <wp:comment_date>2011-08-22 20:23:16</wp:comment_date>
    <wp:comment_date_gmt>2011-08-22 20:23:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Can you tell me how can I get 'score' field in suggestion?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1314044597.1052";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1314122888</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1314122888.5179";s:7:"message";s:49:"emmaespina changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-08-22 20:23:16</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27</wp:comment_id>
    <wp:comment_author><![CDATA[Enhancing search results using machine learning &laquo; emmaespina]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://emmaespina.wordpress.com/2011/08/23/enhancing-search-results-using-machine-learning/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.254.34</wp:comment_author_IP>
    <wp:comment_date>2011-08-23 16:49:40</wp:comment_date>
    <wp:comment_date_gmt>2011-08-23 16:49:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Iâll give you a super fast description of the Naive Bayes algorithm. I used it in previous posts but now Iâll give you a brief introduction to what it [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1314118180.7655";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1314122885</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1314122885.7988";s:7:"message";s:49:"emmaespina changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-08-23 16:49:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>38</wp:comment_id>
    <wp:comment_author><![CDATA[daisy]]></wp:comment_author>
    <wp:comment_author_email>daisy.dumble@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>117.239.96.242</wp:comment_author_IP>
    <wp:comment_date>2012-09-05 08:18:12</wp:comment_date>
    <wp:comment_date_gmt>2012-09-05 08:18:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi

I am using EmbeddedSolrServer 3.6.0. I also use DataImportHandler to index my mysql db. I have a created a new filedType in schema.xml as:


      
			
			
			
      
      
			
			
			
            
    



 

In java code I have set for 

"qt" ="/select"
"q" = text
"rows"=10
"hl"=true
"hl.fl"= "*"
"hl.snippets"=200

I have encountered with these issues:
1. When I search for a text, I get the required result, but result value is not highlighted. But when I search for Sample_Name:text, the text gets highlighted in result. How can I fix this ?
2. Also, I want unique multiValued results. Now the multiValued results are duplicated. How can I remove duplicates in multiValued fields?

Please help me.
Thanks in advance]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1346833093.6289670467376708984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1412561944.06490993499755859375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-09-05 08:18:12</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Ham, spam and elephants (or how to build a spam filter server with Mahout)</title>
  <link>https://emmaespina.wordpress.com/2011/04/26/ham-spam-and-elephants-or-how-to-build-a-spam-filter-server-with-mahout/</link>
  <pubDate>Tue, 26 Apr 2011 15:26:41 +0000</pubDate>
  <dc:creator>emmaespina</dc:creator>
  <guid isPermaLink="false">http://emmaespina.wordpress.com/?p=51</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Introduction</h1>
<p style="text-align:justify;">Something quite interesting has happened with Lucene. It started as a library, then its developers began adding new projects based on it. They developed another open source project that would add crawling features (among others features) to Lucene. <a href="http://nutch.apache.org/">Nutch</a> is in fact a full featured web serach engine that anyone can use or modify. Inspired in some famous papers from Google about<a href="http://labs.google.com/papers/mapreduce.html"> Map Reduce</a> and the <a href="http://labs.google.com/papers/gfs.html">Google Filesystem</a>, new features to distribute the index where added to Nutch and, eventually, those features became a project by them own: <a href="http://hadoop.apache.org/">Hadoop</a>. Since then, many projects have being developed over Hadoop. We are in front of a big explosion of open source code that was ignited by the Lucene spark.</p>
<p style="text-align:justify;">All this projects are in some way related to content processing. For all of you interested in search and information retrieval, now we are going to talk about another project for a domain that's outside the strict confines of search, but can teach you some interest things about content processing.</p>
<p style="text-align:justify;">Recently I have been reading about this new library, Mahout, that provides all those obscure and mysterious machine learning algorithms, together in a library. A lot of modern web sites are using machine learning techniques. These algorithms are rather old and well known, but were popularized recently by its extensive use in social network sites (facebook knowing better than you who could be your best friend) or Google (reading your mind and guessing what you may have wanted to write in the search box) .</p>
<p style="text-align:justify;"><em>In simple words, we can say that a computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks inÂ T, as measured by P, improves with experience E.</em></p>
<p style="text-align:justify;">For example if you wanted to make a program to recognize captchas you would have:</p>
<p style="padding-left:30px;text-align:justify;">T: recognizing captchas</p>
<p style="padding-left:30px;text-align:justify;">P: percentage of words correctly recognized</p>
<p style="padding-left:30px;text-align:justify;">E: a database of captchas with correct words spellings</p>
<p style="text-align:justify;">So, it appears that all they were needing was computing power. And they need a lot of computing power. For example, in supervised machine learning (I learned that term a month ago, don't expect me to be very academic) you show the machine some examples (experience) of what you want and the machine extract some patterns from them. It is pretty the same that a person does when he is learning: from some examples shown to the person, he uses its past knowledge to infer some kind of pattern that will help him to classify future events of the same kind. Well the computers are pretty dumb in learning things, so you have to show them a lot of examples to infer the pattern.</p>
<p style="text-align:justify;">Classification, however, is only part of the problem. There are three big areas that Mahout targets (and there will be more in the future because the project is relatively new). Classification, Clusterization, and Recommendation. Typical examples of these:</p>

<ul style="text-align:justify;">
	<li>Classification: it is supervised learning, you give the machine a lot of instances of... things (documents for example) along with their category. From all of those the machine learns to classify future instances in the known categories.</li>
</ul>
<ul style="text-align:justify;">
	<li>Clusterization: similar to classification in the sense it makes groups of things, but this one is not supervised. You give the machine a lot of things, and the machine makes groups of similar items.</li>
</ul>
<ul style="text-align:justify;">
	<li>Recommendation: It is exactly whatÂ IMDbÂ or Amazon does with the recommended movies or books at the bottom of the page. Based on other users likes (which are measured through the ranking stars that the user vote) Amazon can infer âother users that liked this book also liked these othersâ.</li>
</ul>
<p style="text-align:justify;">If you want a better definition of these three categories you can go to <a href="http://www.ibm.com/developerworks/java/library/j-mahout/">Grant Ingersoll's blog</a>.</p>

<h1>Offline example</h1>
<p style="text-align:justify;">Now I'll show you a simple program that I think is a pretty obvious classification example. We are going to classify mail into <a href="http://www.youtube.com/watch?v=anwy2MPT5RE">spam</a> and not-spam (that is called ham by people that researches it). The steps are the following:</p>

<ol style="text-align:justify;">
	<li>Get a ham/spam corpus from the web (already classified of course).</li>
	<li>Train a classifier with 80% of the corpus, and leave 20% for testing</li>
	<li>Create a simple web service that classifies spam online. You provide it a mail, and it will say âgoodâ or âbadâ (or âhamâ or âspamâ)</li>
</ol>
<p style="text-align:justify;">The corpus we are going to use is the one from <a href="http://spamassassin.apache.org/">Spam Assasin</a>, an open source project from Apache that is an antispam filter. This is a tutorial, so we are not trying to classify very difficult mails just to show how simple it can be done with Mahout (of course, the difficult stuff was programmed by the developers of this library). This <a href="http://spamassassin.apache.org/publiccorpus/">corpus</a> is a pretty easy one and the results will be very satisfying.</p>
<p style="text-align:justify;">Mahout comes with some examples already prepared. One of those is the <a href="https://cwiki.apache.org/MAHOUT/twenty-newsgroups.html">20 newsgroups example</a> that tries to classify many mails from a newsgroup into their categories. This example is found in the Mahout wiki, and luckily for us, the format of the newsgroups are pretty the same as our mails. We are going to apply the same processing chain to our mails than the 20 newsgroup. By the way we are going to use an classification algorithm called naive Bayes that uses the famous <a href="http://en.wikipedia.org/wiki/Bayes'_theorem">Bayes theorem</a>, and that I already mentioned in a previous post. I'm not going to explain how the algorithm works, I'll just show you that it works!</p>
<p style="text-align:justify;">Mahout has two driver programs (they are called that way because they are also used in Hadoop to run as map reduce jobs), one for training a classifier, and the other to test it.
When you train the classifier you provide it with a file (yes, a single file) that contains one document per line, already analyzed. âAnalyzedâ in the same sense that Lucene analyzes documents. In fact what we are going to use is the Lucene StandardAnalizer to clean a little the documents and transform them into a stream of terms. That stream is put in a line of this training file, where the first term is the category that the item belongs. For example the training file will look like this</p>
<p style="padding-left:30px;text-align:justify;">ham new mahout version released
spam buy viagra now special discount</p>
<p style="text-align:justify;">A small program comes with Mahout to turn directories of documents into this format. The directory must have an internal directory for each category. In our case we are going to separate our test set into two directories, one for testing and the other for training (both in &lt;mahout_home&gt;/examples/bin/work/spam where &lt;mahout home&gt; is where you unzipped the mahout distribution).
In each of them we are going to put a spam directory and a ham directory.</p>
<p style="text-align:justify;">test</p>
<p style="padding-left:30px;text-align:justify;">ham
spam</p>
<p style="text-align:justify;">train</p>
<p style="padding-left:30px;text-align:justify;">ham
spam</p>
<p style="text-align:justify;">We manually take about 80% of the ham and put it in train/ham, the rest int test/ham, and the same with the spam in train/spam and test/ham (it has never been easier to prepare the test set!!!)
Next, we are going to prepare the train and test files with the following commands</p>

[code]
bin/mahout prepare20newsgroups -p examples/bin/work/spam/train -o examples/bin/work/spam/prepared-train -a org.apache.mahout.vectorizer.DefaultAnalyzer -c UTF-8
bin/mahout prepare20newsgroups -p examples/bin/work/spam/test -o examples/bin/work/spam/prepared-test -a org.apache.mahout.vectorizer.DefaultAnalyzer -c UTF-8
[/code]
<p style="text-align:justify;">Default analyzer is a Lucene analyzer (actually it is wrapped within a mahout class)</p>
<p style="text-align:justify;">We are going to train the classifier. Training the classifier implies feeding mahout with the train file and letting him build internal structures with the data (yes, as you can deduce by my use of the word âinternalâ, I don't have any idea how that structures work).</p>

[code]
bin/mahout trainclassifier -i examples/bin/work/spam/prepared-train -o examples/bin/work/spam/bayes-model -type bayes -ng 1 -source hdfs
[/code]
<p style="text-align:justify;">The model is created in the bayes-model directory, the algorithm is Bayes (naÃ¯ve Bayes) we are using Hadoop Distributed File System (we are not but you tell that to the command when you are not using a distributed database like Hbase), and ng is the ngrams to use. The ngrams are groups of words. Giving more ngrams you add more context to each word (surrounding words). The most ngrams you use the better the results should be. We are using 1 because the better results obviously cost more processing time.</p>
<p style="text-align:justify;">Now we run the tests with the following command</p>

[code]
 bin/mahout testclassifier -m examples/bin/work/spam/bayes-model -d examples/bin/work/spam/prepared-test -type bayes -ng 1 -source hdfs -method sequential
[/code]

And after a while we get the following results
<pre style="padding-left:30px;">-------------------------------------------------------
 Correctly Classified Instances : 383 95,75%
 Incorrectly Classified Instances : 17 4,25%
 Total Classified Instances : 400</pre>
<pre style="padding-left:30px;">=======================================================
 Confusion Matrix
 -------------------------------------------------------
 a b &lt;--Classified as
 189 11 | 200 a = spam
 6 194 | 200 b = ham</pre>
Very good results!!!

<span class="Apple-style-span" style="font-size:26px;font-weight:bold;">A server to classify spam in real time</span>
<p style="text-align:justify;">But we haven't done anything different from the 20newsgroup example yet! Now, what can we do if we want to classify mails as they are coming. We are going to create a antispam server, where the mail server will send all the mails that it receives and our server will respond if it is ham or spam (applying this procedure)</p>
<p style="text-align:justify;">The server will be as simple as we can (this is just a proof of concept):</p>

[sourcecode language="java"]
public class Antispam extends HttpServlet {

private SpamClassifier sc;

public void init() {
 try {
 sc = new SpamClassifier();
 sc.init(new File(&quot;bayes-model&quot;));
 } catch (FileNotFoundException e) {
 e.printStackTrace();
 } catch (InvalidDatastoreException e) {
 e.printStackTrace();
 }
 }

protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

Reader reader = req.getReader();
 try {

long t0 = System.currentTimeMillis();
 String category = sc.classify(reader);
 long t1 = System.currentTimeMillis();

resp.getWriter().print(String.format(&quot;{\&quot;category\&quot;:\&quot;%s\&quot;, \&quot;time\&quot;: %d}&quot;, category, t1-t0));

} catch (InvalidDatastoreException e) {
 e.printStackTrace();
 }

}

}
[/sourcecode]
<p style="text-align:justify;">As we are going to do a very simple example we are going to use a simple servlet. The important class is SpamClassifier</p>

[sourcecode language="java"]

public class SpamClassifier {

private ClassifierContext context;
 private Algorithm algorithm;
 private Datastore datastore;
 private File modelDirectory;
 Analyzer analyzer;

public SpamClassifier(){
 analyzer = new DefaultAnalyzer();
 }

public void init(File basePath) throws FileNotFoundException, InvalidDatastoreException{

if(!basePath.isDirectory() || !basePath.canRead()){
 throw new FileNotFoundException(basePath.toString());
 }

modelDirectory = basePath;

algorithm = new BayesAlgorithm();
 BayesParameters p = new BayesParameters();
 p.set(&quot;basePath&quot;, modelDirectory.getAbsolutePath());
 p.setGramSize(1);
 datastore = new InMemoryBayesDatastore(p);
 context = new ClassifierContext(algorithm, datastore);
 context.initialize();
 }

public String classify(Reader mail) throws IOException, InvalidDatastoreException {
 String document[] = BayesFileFormatter.readerToDocument(analyzer, mail);
 ClassifierResult result = context.classifyDocument(document, &quot;unknown&quot;);

return result.getLabel();
 }

}

[/sourcecode]
<p style="text-align:justify;">You have a datastore and an algorithm. The datastore represents the model that you previously created training the classifier. We are using a InMemoryBayesDatastore (there is also HbaseBayesDatastore that uses the Hadoop database), and we are providing it the base path and the ngrams size. We are using ngrams of 1 to simplify this example. Otherwise it is necessary to postprocess the analyzed text constructing ngrams.
The algorithm is the core of the method and it is an obvious instance of the Strategy design pattern. We are using BayesAlgorithm but well we could have used CbayesAlgorithm that uses the Complementary Naive Bayes Algorithm.
ClassifierContext is the interface you'll use to classify documents.</p>
<p style="text-align:justify;">We can test our server using curl:</p>

<pre>curl http://localhost:8080/antispam -H "Content-T-Type: text/xml" --data-binary @ham.txt</pre>
and we get
<pre>{"category":"ham", "time": 10}</pre>
<h1>Conclusions</h1>
<p style="text-align:justify;">As we have seen, the spam filtering process can be separated into two parts. An offline process where you have a lot of mails already classified by someone, and train the classifier. And an online process where you test a document to classify it using the model previously created. The model can evolve, you can add more documents with more information and after you perform the offline processing you update the online server with the new model. The model can be very big. This is where Hadoop enters the scene. The offline process can be sent to a cluster running hadoop, and using the same libraries (Mahout!) you perform what looks like the exactly same algorithms and get the results faster. Of course the algorithms is not the same because it is been executed in parallel by the thousand of computers that you surely have in your cluster (or the two or three PCs you have). Mahout was designed with this in mind. Most of its algorithms were tailored to work over Hadoop. But the interesting thing is that they can also work without it for testing purposes, or when you must incorporate the algorithms to a server without the needs of distributed computation, like how we did in this post. The combination of its possibilities to be user over a cluster and to be embedded to a application makes Mahout a powerful library for modern applications that use data of web scale.</p>
<p style="text-align:justify;"><span style="font-family:Arial;font-size:xx-small;"><strong>
</strong></span></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>51</wp:post_id>
  <wp:post_date>2011-04-26 15:26:41</wp:post_date>
  <wp:post_date_gmt>2011-04-26 15:26:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ham-spam-and-elephants-or-how-to-build-a-spam-filter-server-with-mahout</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19271513]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>24</wp:comment_id>
    <wp:comment_author><![CDATA[icaro]]></wp:comment_author>
    <wp:comment_author_email>icaro0@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://icaro0.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>95.61.102.107</wp:comment_author_IP>
    <wp:comment_date>2011-05-12 15:29:32</wp:comment_date>
    <wp:comment_date_gmt>2011-05-12 15:29:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice Article thanx for share it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1305214173.527";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1305214771</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1305214771.0807";s:7:"message";s:49:"emmaespina changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-05-12 15:29:32</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>31</wp:comment_id>
    <wp:comment_author><![CDATA[Ramprakash Ramamoorthy]]></wp:comment_author>
    <wp:comment_author_email>youngestachiever@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>121.244.182.76</wp:comment_author_IP>
    <wp:comment_date>2011-12-13 10:37:33</wp:comment_date>
    <wp:comment_date_gmt>2011-12-13 10:37:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wonderful article! You are awesome :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1323772653.6707";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1323784155</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1323784155.7492";s:7:"message";s:49:"emmaespina changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-12-13 10:37:33</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>34</wp:comment_id>
    <wp:comment_author><![CDATA[Samir Madhavan]]></wp:comment_author>
    <wp:comment_author_email>samzer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>115.112.231.105</wp:comment_author_IP>
    <wp:comment_date>2012-03-05 09:01:58</wp:comment_date>
    <wp:comment_date_gmt>2012-03-05 09:01:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thumbs up! Really nice article.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1330938118.9151";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1330951383</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1330951383.8491";s:7:"message";s:49:"emmaespina changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-03-05 09:01:58</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>36</wp:comment_id>
    <wp:comment_author><![CDATA[susnata@gmail.com]]></wp:comment_author>
    <wp:comment_author_email>susnata@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.170.33.125</wp:comment_author_IP>
    <wp:comment_date>2012-07-11 02:02:12</wp:comment_date>
    <wp:comment_date_gmt>2012-07-11 02:02:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great post!]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1341972133.4848";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1412561943.897387027740478515625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-07-11 02:02:12</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>43</wp:comment_id>
    <wp:comment_author><![CDATA[florist shops in greenville sc]]></wp:comment_author>
    <wp:comment_author_email>vernitamorgan@freenet.de</wp:comment_author_email>
    <wp:comment_author_url>http://wu-qiu.blogspot.com/2006/07/las-vegas-golf-in-july-day-2.html</wp:comment_author_url>
    <wp:comment_author_IP>142.91.81.61</wp:comment_author_IP>
    <wp:comment_date>2013-06-03 05:19:41</wp:comment_date>
    <wp:comment_date_gmt>2013-06-03 05:19:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Having read this I thought it was rather enlightening.

I appreciate you finding the time and energy to put this informative article together.
I once again find myself personally spending way too much time both reading and leaving comments.
But so what, it was still worthwhile!]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1370236782.268456935882568359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1412561944.2934360504150390625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-06-03 05:19:41</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>55</wp:comment_id>
    <wp:comment_author><![CDATA[magdalena]]></wp:comment_author>
    <wp:comment_author_email>magdalena.moeller@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>217.110.111.102</wp:comment_author_IP>
    <wp:comment_date>2013-09-13 15:34:39</wp:comment_date>
    <wp:comment_date_gmt>2013-09-13 15:34:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[strong understanding of topic shown in light and funny style, I've read it with pleasure, thank you]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1379086480.1563060283660888671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1412561945.145946025848388671875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-09-13 15:34:39</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>360</wp:comment_id>
    <wp:comment_author><![CDATA[masusapu]]></wp:comment_author>
    <wp:comment_author_email>masusapu@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://rinrinnchi.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>121.3.87.155</wp:comment_author_IP>
    <wp:comment_date>2015-02-01 18:10:58</wp:comment_date>
    <wp:comment_date_gmt>2015-02-01 18:10:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thank you for sharing! Definitely will try it!]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>41218267</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1422814258.5535430908203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"masusapu";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>6324395285</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1422814258</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1422819573.65141201019287109375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"masusapu";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Enhancing search results using machine learning</title>
  <link>https://emmaespina.wordpress.com/2011/08/23/enhancing-search-results-using-machine-learning/</link>
  <pubDate>Tue, 23 Aug 2011 16:49:32 +0000</pubDate>
  <dc:creator>emmaespina</dc:creator>
  <guid isPermaLink="false">http://emmaespina.wordpress.com/?p=77</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Todayâs blog will be about enhancing search results by the use of machine learning. The principle is simple: if you have a very popular site you can make use of the behavior of your users to improve the search quality of new users.</p>
<p style="text-align:justify;">Well I donât have a very popular site :( So this post will be about a theoretical idea that still have to be tested. If you want to perform tests about the solution Iâm about to give, please contact me (or leave a comment). That is what I am missing to be able to write a <a href="http://seriouscat.com/">serious</a> paper (or a serious post at least).</p>

<h2>Introduction</h2>
<p style="text-align:justify;">To introduce you in the topic letâs think about how the users are used to work with âinformation retrieval platformsâ (I mean, search engines). The user enters your site, sees a little rectangular box with a button that reads âsearchâ besides it, and figures out that he must think about some keywords to describe what he wants, write them in the search box and hit search. Despite we are all very used to this, a deeper analysis of the workings of this procedure leads to the conclusion that it is a quite unintuitive procedure. Before search engines, the action of âmentally extracting keywordsâ from concepts was not a so common activity.</p>
<p style="text-align:justify;">It is something natural to categorize things, to classify the ideas or concepts, but extracting keywords is a different intellectual activity. While searching, the user must think like the search engine! The user must think âwell, this machine will give me documents with the words I am going to enter, so which are the words that have the best chance to give me what I wantâ</p>
<p style="text-align:justify;">Wouldât be great to search by concept, for example, the user wants documents from the World War II about the Normandy Landings. So he enter âNormandy Landingsâ and the search engine figures out that that guy is looking for documents about the WWII more precisely about the Normandy Landings, not just documents with the words âNormandyâ and âLandingsâ</p>

<h2>The problem</h2>
<p style="text-align:justify;">Well readers, the problem that I just described already exists, and its called <a href="http://en.wikipedia.org/wiki/Web_query_classification">Web Query Classification</a>. You can read the full idea there, in the wikipedia.</p>
<p style="text-align:justify;">What I propose here is to use a simple yet powerful machine learning technique (that is <a href="http://en.wikipedia.org/wiki/Naive_Bayes_classifier">Naive Bayes</a>) to extract the categories from the user entered query to enhance the results quality, based on query logs to train the model.</p>
<p style="text-align:justify;">But what do I mean with categories? Intentionally ambiguous, that term applies to a broad range of problems. In particular I came up with this idea from a clientâs problem. This client wanted to improve the results extracting brand names and product types from the query string. So if the person entered âcherry cokeâ they wanted to show the results of âCoca Cola Cherryâ. Having extracted the brand names (if any) from the query, they wanted (in some way) to improve (boost or filter) the results. So for âcheery cokeâ they would extract âCoca Colaâ as the brand, and from among all the Coca Cola products they will search for âcherryâ or âcokeâ (it is likely to get the Coca Cola Cherry with a high ranking in the results)</p>

<h2>The possible solution</h2>
<p style="text-align:justify;">The web server logs are a good source to train the Naive Bayes algorithm. This idea is similar to the one found in this paper: Probabilistic Query Expansion Using Query Logs - Hang Cui. They are storing the query that the user entered and the document that the user clicked afterwards.</p>
<p style="text-align:justify;">session := &lt;query text&gt; [clicked document]*</p>
<p style="text-align:justify;">The difference that Iâm proposing here is not to store the clicked document but itâs associated categories (or âideasâ, âconceptsâ, etc). The query will be composed of queries and the categories of the documents that the user clicked after the search. For example, some entries in the logs could be:</p>

<pre style="padding-left:30px;">âworld warâ =&gt; [World War II]</pre>
<pre style="padding-left:30px;">âworld war IIâ =&gt; [World War II]</pre>
<pre style="padding-left:30px;">âNormandy landingsâ =&gt; [World War II]</pre>
<pre style="padding-left:30px;">âGermany 1945â =&gt; [World War II]</pre>
<pre style="padding-left:30px;">âGermany 1945â =&gt; [World War II]</pre>
<pre style="padding-left:30px;">âgermany 1945â =&gt; [German Cinema]</pre>
<p style="text-align:justify;">[World War II] is just a tag name. It wont be tokenized, or anything as it is just a representation of an idea or concept. âNormandy landingsâ refers to the concept of [World War II], and âGermany 1945â also refers to the same concept.</p>
<p style="text-align:justify;">Note the last entry in the example. In this case the user clicked an article about Wim Wenders, a german film director that was born in 1945. This is an example of a non representative result. If you say âGermany 1945â, most people will think about the war. However, somebody looking for a german film director that was born in 1945 whose name he doesnât recall, could enter âGermany 1945â to get to the page of Wim Wenders. Looking for âgermany 1945 moviesâ could improve his results to find Wenders. Our system should return two âideasâ from this text [World War II] and [German Cinema], and the results should contain mainly German propaganda films from that period, because that is what a human would most likely be looking for with that text.</p>
<p style="text-align:justify;">To summarize, we are trying to get the categories with the higher chance.</p>
<p style="text-align:justify;">How did we created this log? Easy, each time the user clicked on a document we check if he had performed a search. If he has, then we extract the categories from the document and store a log entry in the previously described format. But a question that will naturally arise is how to extract the categories from a document. That is beyond the scope of this post, and I assume that somebody has read all the documents that we have and have manually assigned categories to them. The category (or idea, or brand, or concept) is just another field in our documents database, available from the very beginning of our experiment.</p>

<h2>Naive Bayes</h2>
<p style="text-align:justify;">To get the categories with the greater chance, we are going to have to deal with probabilities. Iâll give you a super fast description of the Naive Bayes algorithm. I used it in previous <a href="http://emmaespina.wordpress.com/2011/01/31/20/">posts</a> but now Iâll give you a brief introduction to what it does.</p>
<p style="text-align:justify;">Suppose you have a text and you want to extract which category it belongs to. Since you donât know the âtrueâ category of the text you would like to get the category with the greater chance from among all the possible categories (or the three most probable categories, for instance). This, written in math language, would be the following formula</p>
<p style="text-align:center;">$latex max P(cat | germany 1945 )&amp;s=1 $</p>
<p style="text-align:justify;">That is, given that the user entered âgermany 1945â, we get the probabilities of each of the categories of being associated with that text. We take the category that gave the higher probability and return that category.</p>
<p style="text-align:justify;">The problem is solved better by flipping the condition by means of the Bayes theorem</p>
<p style="text-align:center;">$latex P(&lt;cat&gt; | germany 1945) = \frac{P( germany 1945 | &lt;cat&gt;)P(&lt;cat&gt;)}{P(germany 1945)}&amp;s=1 $</p>
<p style="text-align:justify;">To maximize this the parameter that we are allowed to modify is the category (the text is given and we can not modify that). So we can omit the P(âgermany 1945â) to simplify the problem</p>
<p style="text-align:center;">$latex max P( germany 1945 | &lt;cat&gt;)P(&lt;cat&gt;)&amp;s=1 $</p>
<p style="text-align:justify;">There are two parts here. Some categories are more probable than others. For example think about the categories &lt;Quantum Electrodynamics&gt; and &lt;Sex&gt; and youâll immediately recognize a tendency in the popularity of those terms. Those probabilities can be also estimated through the log.</p>
<p style="text-align:justify;">For the first part we need to consider the individual terms. Not âgermany 1945â but âgermanyâ and â1945â. To calculate the probability of P( âgermanyâ intersection â1945â | &lt;cat&gt;) we need to make the ânaive assumptionâ of Naive Bayes: all the terms in the query string are conditionally independent. That means that âgermanyâ is completely independent from â1945â. We know that it is not true, but with this assumption the experience has proven to give very good results. From this assumption we can change the formula to the following:</p>
<p style="text-align:center;">$latex P( germany | &lt;cat&gt;)P( 1945 | &lt;cat&gt;)P(&lt;cat&gt;)&amp;s=0 $</p>
<p style="text-align:justify;">I donât extend much further, but there are some issues if a word have never appeared associated with a category. For example searching âWorld War II Bananasâ the probability of P(âbananasâ | [WWII]) would be 0 and the entire calculation will be 0. But we know that the entered text, despite being odd, is related to [WWII]. A solution to that is adding 1 to each probability. The final calculation that we must perform is:</p>
<p style="text-align:center;">$latex [P(germany|&lt;cat&gt;) + 1][P(1945|&lt;cat&gt;) + 1][P(&lt;cat&gt;) + 1]&amp;s=0 $</p>
This is called Laplace smoothing or <a href="http://en.wikipedia.org/wiki/Additive_smoothing">additive smoothing</a>
<h2>Â Implementation</h2>
<p style="text-align:justify;">We are not going to implement all that! We are going to use Mahout (again). We can recycle some of the code from the previous post about classifying mail for this.</p>
<p style="text-align:justify;">We need some script to pre-process the query log to take it to the format that the Naive Bayes algorithm accepts.</p>
<p style="text-align:justify;">That is to get something like:</p>

<pre style="padding-left:30px;">World_War_II normandy landings</pre>
<pre style="padding-left:30px;">World_War_II germany 1945</pre>
<pre style="padding-left:30px;">World_War_II germany 1945</pre>
<pre style="padding-left:30px;">German_Cinema germany 1945</pre>
<p style="text-align:justify;">This is very similar to the text input from the previous post (the category must be expressed as a single word). After training the model we can use exactly the same program to create an online classifier of queries.</p>
<p style="text-align:justify;">Then and assuming that we are using Solr as the search engine we can add boost queries to the regular query. This process would be:</p>
<p style="text-align:justify;">The user enters âGermany 1945 moviesâ. The system queries our âonline query classifierâ and gets two possible categories: [WWII] and [German films]. Now we submit a query to Solr in the following fashion:</p>
<p style="text-align:center;">http://solrserver/solr/dismax?q=Germany+1945+movies&amp;bq=category:WWII&amp;bq=category:german_films</p>
<p style="text-align:justify;">The category classifier can give us a score (extracted from the Naive Bayes calculation). That, with some application logic, can be used to boost the categories. For example if we got [WWII] with a high ranking we can give a higher boost to the query:</p>
<p style="text-align:center;">q=Germany+1945+movies&amp;bq=category:WWII^3</p>

<h2>Â Conclusions</h2>
<p style="text-align:justify;">There is little to say here since I donât have a data set to test this blackboard experiment. So I can not say much more than that it is a very elegant idea. However, and as I previously said, this is not a very original idea. It has been studied before and a search in Internet will give you plenty of results. The interesting thing here is that all that we need to apply this in our homes is already available through open source software. Both Solr and Mahout are open source project. With them you can build a learning search engine in a couple of minutes.</p>
<p style="text-align:justify;">Returning to the dataset, I would be glad that somebody shares some query logs. This things work better with a lot of queries and the best example I could find is <a href="http://www.sigkdd.org/kdd2005/kddcup.html">http://www.sigkdd.org/kdd2005/kddcup.html </a>that is a Data mining competition where they have 800 classified queries. This is not enough for our purposes.</p>
<p style="text-align:justify;"><span style="color:#000000;"><span style="font-family:Arial;"><span style="font-size:x-small;"><br style="font-size:x-small;" /></span></span></span></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>77</wp:post_id>
  <wp:post_date>2011-08-23 16:49:32</wp:post_date>
  <wp:post_date_gmt>2011-08-23 16:49:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>enhancing-search-results-using-machine-learning</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="machine-learning"><![CDATA[machine learning]]></category>
  <category domain="category" nicename="mahout"><![CDATA[mahout]]></category>
  <category domain="post_tag" nicename="naive-bayes"><![CDATA[naive bayes]]></category>
  <category domain="category" nicename="solr"><![CDATA[Solr]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19271513]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ca27a23ca6541bf8d3daef22941cb59a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_21cf3c1a11a49b2ba83c0a67428a6b13</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a9f606d00560431348d22251da39ebf8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a5a0549051aebaa340b54ab69096475c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8c41e77ceb134c2c73980b59dd69832c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bdbb3a915807a9ff76515d2c40242b90</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8daf31141abd68f5c122a9387832665c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2a52af334130195485c170de8196586a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9914fd2aca1a2f7e8396e52eb33130b8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_315e0f2fa121ee136b9ea4ad75a82659</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>28</wp:comment_id>
    <wp:comment_author><![CDATA[Itman]]></wp:comment_author>
    <wp:comment_author_email>leo@boytsov.info</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>130.14.254.25</wp:comment_author_IP>
    <wp:comment_date>2011-08-24 16:49:47</wp:comment_date>
    <wp:comment_date_gmt>2011-08-24 16:49:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi, I guess that you can find some datasets here:
http://webscope.sandbox.yahoo.com/catalog.php?datatype=l]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1314204588.6643";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1314204588</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-08-24 16:49:47</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>33</wp:comment_id>
    <wp:comment_author><![CDATA[Esteban]]></wp:comment_author>
    <wp:comment_author_email>esteban.donato@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>186.18.129.233</wp:comment_author_IP>
    <wp:comment_date>2012-01-16 09:31:20</wp:comment_date>
    <wp:comment_date_gmt>2012-01-16 09:31:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice article :).  The conditional independence assumption of naive Bayes is a good start, however you could use the conditional probability for those terms that are highly co-related.  In theory you should get more accurate predictions.  You can use the chi-squared (X2) test to check the independence of two  variables, in this case two terms and use the conditional prob when the test is rejected.

Btw, you can use the AOL query logs for your experiment.  They have all you need except the categorization of target URLs that is something you will have to come up with http://www.gregsadetsky.com/aol-data/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1326706281.3314";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1326718770</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1326718770.553";s:7:"message";s:49:"emmaespina changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-01-16 09:31:20</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>404</wp:comment_id>
    <wp:comment_author><![CDATA[Aman Tandon]]></wp:comment_author>
    <wp:comment_author_email>amantandon.10@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/115814673784312666584</wp:comment_author_url>
    <wp:comment_author_IP>116.203.79.128</wp:comment_author_IP>
    <wp:comment_date>2015-07-27 14:41:29</wp:comment_date>
    <wp:comment_date_gmt>2015-07-27 14:41:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice article, This is somewhat we are doing to find the relevant category from the query, we do the 2 query first for identifying user intent bu finding related categories and query the term and and boost relevant terms as well.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1438008089.623013973236083984375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>13138289396</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1438008503</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1438008503</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1438008504.028789997100830078125;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Multivalued geolocation fields in Solr </title>
  <link>https://emmaespina.wordpress.com/2011/09/30/multivalued-geolocation-fields-in-solr/</link>
  <pubDate>Fri, 30 Sep 2011 20:36:39 +0000</pubDate>
  <dc:creator>emmaespina</dc:creator>
  <guid isPermaLink="false">http://emmaespina.wordpress.com/?p=104</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Today we'll see a small workaround that can be used to accomplish a very common use case regarding geographic search.</p>
<p style="text-align:justify;">The example use case is the following</p>
<p style="padding-left:30px;text-align:justify;"><em>The client is located in Buenos Aires and wants a purple tie</em></p>
<p style="padding-left:30px;text-align:justify;"><em>He enters the query âpurple tieâ in the search box from or store web page</em></p>
<p style="padding-left:30px;text-align:justify;"><em>The system returns the ties that can be purchased in the stores near Buenos Aires, and then in our stores in Montevideo (ie ties that can be found in nearby stores)</em></p>
<p style="text-align:justify;">That is, the system does not returns ties in our stores in Spain because nobody would travel to Spain to buy a tie nor will order a tie across the Atlantic Ocean (no tie is so special). This is part of the first and probably only problem in search systems: return only relevant results. In this case relevant considering their location.</p>
<p style="text-align:justify;">The problem in theory could be easily solved with a multivalued coordinate field, where each tie (or product in our system) will have a list of coordinates where that tie is located. We would perform a filtering of our products in a circle centered in Buenos Aires to get the nearby products.</p>
<p style="text-align:justify;">This works fine if the product is available only in one store, but when it is in multiple locations simultaneously (ie, there is a list of coordinates in the field, not a single one) the problem arises. It happens that Solr does not allow filtering on multivalued coordinate fields.</p>
<p style="text-align:justify;">But not everything is lost, and in this post I'll propose a workaround to solve this issue.</p>
<p style="text-align:justify;">We are going to create another index, containing only the Stores, their id, and location. Using a C style pseudo code we can consider this as a document in our âstores indexâ</p>

<pre style="padding-left:30px;">struct {</pre>
<pre style="padding-left:60px;">latlon location;</pre>
<pre style="padding-left:60px;">int storeID;</pre>
<pre style="padding-left:30px;">} store;</pre>
<p style="text-align:justify;">Having this other index (another Solr Core for example) we are going to split our query in two:</p>
<p style="text-align:justify;">1- For the first query you will query the âstores indexâ. You are going to perform a geographic filter query (using the spatial Solr functionality) and you will get a list of store ids near the central point you specified.Â You haven't used the query entered by the user in this phase yet, only the location of the user got by some means.</p>

<pre style="padding-left:30px;">q=*:*&amp;fl=storeID&amp;fq={!geofilt pt=-34.60,-58.37 sfield=location d=5}</pre>
<p style="text-align:justify;">And you obtain a list of store ids</p>
<p style="padding-left:30px;text-align:justify;">id=34, id=56, id=77</p>
<p style="text-align:justify;">2 - In the second phase you are going to perform the query (now providing the query that the user entered) in the regular way, but with the addition of a filter query (a regular filter query, not a geographic one) in the following fashion:</p>

<pre style="padding-left:30px;">q=âproduct brand xâ&amp;fq=(<strong>storeId:34 OR storeId:56 OR storeId:77</strong>)</pre>
<pre style="padding-left:30px;"></pre>
<p style="text-align:justify;">where the store ids are the ones returned by the first query and, consequently, are the ones near the central point.</p>
<p style="text-align:justify;">In this case you are restricting your results to the ones near the user. You can also boost the nearest results but also showing the ones that are far away in advanced pages of the results.</p>
<p style="text-align:justify;">To summarize, we use two queries with regular functionality to get the advanced functionality you desire. The first query gets the stores near the zone, and the second is the actual query.</p>
<p style="text-align:justify;">There is a patch in development to accomplish the same functionality <a href="https://issues.apache.org/jira/browse/SOLR-2155">SOLR-2155</a>Â but is has not been commited yet. Meanwile here you have a good example of what you can do with multiple queries to Solr.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>104</wp:post_id>
  <wp:post_date>2011-09-30 20:36:39</wp:post_date>
  <wp:post_date_gmt>2011-09-30 20:36:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>multivalued-geolocation-fields-in-solr</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19271513]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1ff5da018edeb4b48f96cb0c849b4320</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_47439d5f444eea2a8f9ec60e6f3adae9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f8d56c4bc548eae3d290705fb6e2c4e9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cf107bac78583677abd1b955c104d932</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>29</wp:comment_id>
    <wp:comment_author><![CDATA[Hoss]]></wp:comment_author>
    <wp:comment_author_email>anon@wordpress.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>65.78.136.75</wp:comment_author_IP>
    <wp:comment_date>2011-10-03 01:58:14</wp:comment_date>
    <wp:comment_date_gmt>2011-10-03 01:58:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This type of logic flow has a lot of power beyond just geo-based searches, and with the new "Join" QParser that will be available in Solr 4.x, you won't need to use a distinct index (or a second query) to do things like this.  

You can put your "store" documents in the same index as your "product" documents and "join" between them, ala...

q=âproduct brand xâ&amp;fq={!join from=id to=storeId v=$loc}&amp;loc={!geofilt pt=-34.60,-58.37 sfield=location d=5}

See the wiki for more details...

https://wiki.apache.org/solr/Join]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1317607094.818";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1317607994</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1317607994.4524";s:7:"message";s:49:"emmaespina changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"emmaespina";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-10-03 01:58:14</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Felipo: My own PHP framework</title>
  <link>https://emmaespina.wordpress.com/2012/08/21/felipo-my-own-php-framework/</link>
  <pubDate>Tue, 21 Aug 2012 03:35:49 +0000</pubDate>
  <dc:creator>emmaespina</dc:creator>
  <guid isPermaLink="false">http://emmaespina.wordpress.com/?p=116</guid>
  <description/>
  <content:encoded><![CDATA[In my opinion when you have done a project that you like and you wouldnât like to let it die, forgotten in some server in Slovakia, you open source it. That is exactly what I did with Felipo (editor note: Felipo is the name of the authorâs cat).

<a title="Felipo Github" href="https://github.com/espinaemmanuel/Felipo" target="_blank">https://github.com/espinaemmanuel/Felipo</a>

If you see some similarities with other frameworks you are right. Felipo is strongly inspired in Ruby on Rails but written in PHP. Anyone interested in extending it will be welcomed. Just send me a mail and if you want to contribute your changes back create a pull request in Github. It is licensed under Apache so there are little restrictions on what you can do with it.

I will very briefly summarize some of its characteristics. You will notice that some parts are in Spanish and some in English. Thatâs because it started as a project in Spanish, not as framework and with the time it evolved into an independent piece of software. The language for new additions will always be English.

And finally youâll notice the lack of unit tests in this project. Well that is bad and I know it. Again, anyone can add them now that it is open source.
<h2>Front controller architecture based on modules</h2>
The architecture is basically the same as many web frameworks and is based on the design <a title="Martin Fowler front controller" href="http://martinfowler.com/eaaCatalog/frontController.html" target="_blank">proposed</a> by Martin Fowler. The idea, essentially, is to separate the view from the controllers. All the request are redirected via mod_rewrite to the same php script (front_controller.php) that parses the request. This, based on the URI string, redirects the request to the right controller. This redirection is based on a convention in the url:

http://&lt;base_domain&gt;/module/controller/action?params

The system is organized in modules. For example one module can be the admin interface and another the front end. Each module corresponds to a directory in the apps directory. In the pageControllers directory inside each module you find the modules that are classes, and the actions are methods in those classes.
<h2>Multiple configuration environments</h2>
You can define a configuration for production, development, testing, etc. One environment will be selected based on different rules, currently there is a default one and another that is chosen based on the HTTP request "host" header (it is assumed that the production environment will have the real domain as the value for this header, and dev will have âlocalhostâ). Based on that, the right config file is loaded.
<h2>Extensible via plugins</h2>
The initial idea was to make this system easy to extend. A plugin is a folder in the include directory. Among the plugins currently in the system itâs worth noticing the database plugin that implements the Active Record pattern and the REST plugin that adds controllers to expose the Active Record via a REST interface.

The plugins are loaded selectively according to the $config ['plugins'] values in the configuration file.
<h2>Database connections via Active Record</h2>
Felipo implements a very lightweight version of active record. For example to save a person in a database:
<pre style="padding-left:30px;">class Person extends ActiveRecord {}</pre>
<pre style="padding-left:30px;">$person = new Person();</pre>
<pre style="padding-left:30px;">$person-&gt;id = 123;</pre>
<pre style="padding-left:30px;">$person-&gt;name = âEmmanuelâ;</pre>
<pre style="padding-left:30px;">$person-&gt;lastName = âEspinaâ;</pre>
<pre style="padding-left:30px;">$person-&gt;save();</pre>
This will execute in the database:
<pre style="padding-left:30px;">INSERT INTO âPersonâ (id, name, lastName) VALUES (123, âEmmanuelâ, âEspinaâ);</pre>
As you can see it is very simple (in simple cases). To load the person you do:
<pre style="padding-left:30px;">$person = Person::loadById(123);</pre>
The active records go in the models directory in each module.
<h2>Easy REST resources</h2>
Now that you have a Person represented as an active record you can expose it to the world with a ActiveRecordResource
<pre style="padding-left:30px;">class Person extends ActiveRecordResource {}</pre>
That goes to the resources directory. Currently for this to work you must have a corresponding active record in the models directory with the name Person_AR (Iâll fix this in the future)
Now if you want to get the person you create a rest controller inheriting from <strong>RestControllerGenerico</strong>

And send it a request like:
<pre style="padding-left:30px;">http://&lt;base_domain&gt;/module/rest/index/Person/123</pre>
And you will get the person formatted as a JSON object.
<h2>What else?</h2>
To keep this post short I didnât include elements like Authenticators (there are LDAP and Mysql based authentication modules). Also the login and session management is already included as another plugin.

Finally there is a set of validators and html form generators that take a specification of a form (as a JSON object) and creates the html and then can create validators on run time to test if it passes simple validations.

You can investigate all of these features reading the code (and documenting it if you want :) )

The interesting thing about this framework is that it is small, and one of the main design decision was to make it fully modular by the use of plugins. Almost anything is a plugin even the database connectivity. This should keep the system simple enough for anyone to understand it and extend it relatively easy.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>116</wp:post_id>
  <wp:post_date>2012-08-21 03:35:49</wp:post_date>
  <wp:post_date_gmt>2012-08-21 03:35:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>felipo-my-own-php-framework</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="controller-architecture"><![CDATA[controller architecture]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-development"><![CDATA[software-development]]></category>
  <category domain="post_tag" nicename="technology"><![CDATA[technology]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="web-frameworks"><![CDATA[web frameworks]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19271513]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_99fdb50536981726210c9a0d638bcc4e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a3f8333e831b61425ee5f3c6c2bad2b4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f687ebee04a9db60345239e0b71805fa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1bd502d44ed134a4e15a4f7a21cdade8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a769e7ef56774d8b9e35c5e34d7aba70</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d12c8da4dc0fb42b69b1f5bb157252bd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fc06f7dc0382a98262c88241e71658f0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e76829eef205fbebfcc4ada777deaaa5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ed05c67d94e933f598b003385efa0a08</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_45c17ac85f049ff26fdabe1b40f4a7b1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_17a7597a452179c7a807153cc57ffdaf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9b3d50fc2a85fcd4de63196598d68b7f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
